-- Start ------

---------- Introduction ----------
-> Node.js is a platform (server-side) which is built on google chrome's javascript v8 engine. 
-> It is open source , cross platform and is capable of generating real time web applications.
-> It uses event-driven, non-blocking I/O operation model which makes it efficient and light-weight. 
-> It is developed by Ryan Dahl with the team of other developers working at joyent in 2009. 
-> Its initial release only supports linux.
-> It is written in C,C++ and javascript.
-> It's package ecosystem 'NPM' is the largest ecosystem of open source libraries in the world.


--- Hello World in Node js ---
file-name : index.js
console.log(" Hello World !");

You can run the above code using the following command :
>> node index.js

---- Create a Server in node js ---------
-> Node provide us with the inbuilt http module which we can use to create the server. 
    Get the access to the module by using require.
-> Mention the host i.e. localhost (127.0.0.1) to serve it locally.
-> Mention the port. We are using port : 3000 for our example.

->Create a server using the createServer() method. 
    createServer() method takes a callback function as arguments. 
    This callback is executed each time a request is received.

->The two arguments of createServer() method are
    request : which contains all the information related to client's request such as URL, custom headers , client info , etc.
    response : which is used to return the data back to the client.

-> response.writeHead is an inbuilt method which is used to send the status code and the MIME type
-> And after that we are just Printing the value on the console using console.log() function.
-> response.end() is an inbuilt function which is used to tell the server that the request has been fulfilled.Along with that we can also send one response using this.
-> server.listen() is an inbuilt method used to bind to the port an start listening for incoming connections.

Ex:-
>> file-name: server.js
>> run as : node server.js

---- Create a Server in node js and Serve a String ----
-> response.write() : It is the inbuilt method which is used to send the response. 
    In the above section we used response.end() to send the response but we can only send one response using this. 
    however , we can send as many responses as we want using response.write() method. 


--- Create a Server in node js and serve HTML ---
->  we serve html files via the node.js server.
Ex:- file-name : serve-html.js

    fs.readFile('index.html', (err, data) => {
		//checking for errors
		if (err) 
			throw err;
		console.log("Operation Success");
		//sending the response
		res.end(data);
	});

--- Create a Server in node js and serve JSON ---
-> There may be scenarios when the response which we need to send is not a plain text.
    For REST Api's we usually have to send JSON response. 

Ex:- file-name : serve-json.js

    let json_response = {
		status : 200 , 
		message : 'succssful' , 
		result : [ 'sunday' , 'monday' , 'tuesday' , 'wednesday' ] , 
		code : 2000
	}
	console.log('Server Running');
	res.end( JSON.stringify(json_response) ); 

--- Create a Server in node js and serve pdf ---
->  make things intersting and try to serve a pdf file using a node.js server.
Ex:- file-name : serve-pdf.js
    fs.readFile('index.pdf', (error,data) => {
		if(error){
			res.json({'status':'error',msg:err});
		}else{			
			res.write(data);
			res.end();       
		}
    });


-- Create a Server in node js and serve Audio/mp3 ---
->
Ex:- 
    // change MIME type to 'audio/mp3'
    res.writeHead(200, {'Content-Type': 'audio/mp3'});

     fs.exists('audio.mp3',function(exists){
		if(exists)
		{
			var rstream = fs.createReadStream('audio.mp3');
			rstream.pipe(res);
		}
		else
		{
			res.end("Its a 404");
		}
	});


--- Create a Server in node js and serve video/mp4 ---
->
Ex:- 
    // change the MIME type to 'video/mp4'
    res.writeHead(200, {'Content-Type': 'video/mp4'});

    fs.exists('video.mp4',function(exists){
		if(exists)
		{
			var rstream = fs.createReadStream('video.mp4');
			rstream.pipe(res);
		}
		else
		{
			res.send("Its a 404");
			res.end();
		}
	});


----------- Summary --------
-> introduction to node.js. 
Then an hello world example in node.js. 
Then we learned how to create a simple http server in node.js and serve the following :
    Serve a String using node.js server
    Serve html file using node.js server
    Serve JSON using node.js server
    Serve pdf file using node.js server
    Serve mp3 file using node.js server
    Serve video/mp4 file using node.js server