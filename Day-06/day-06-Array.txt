# ARRAY METHODS

--- Introduction ---
Arrays are used to store multiple values in a single var . 
Their index starts from 0 .

--- Create an array ---

// Create an array of names
var names = ["rj", "ricky", "alex"];
console.log(names);

//Another way to create array 
var arr = new Array(3); 	// declare an array "arr" of size 3
arr = [1,5,7];  		// initialize elements of array


--- push() Method in arrays ---
push method in arrays is used to insert an element in the end of the array.
Ex:- 
    arr = ['a','e','i','o'];
    console.log(arr);
    arr.push('u');
    console.log(arr);
Output:-
    >node push.js
    [ 'a', 'e', 'i', 'o' ]
    [ 'a', 'e', 'i', 'o', 'u' ]

--- pop() Method in arrays ---
pop method in arrays is used to remove the element from the end of the array. 
Ex:-
    arr = [ 5 , 5 , 8 , 7 , 6 ];
    arr.pop();
    console.log(arr);	
Output:-
    [ 5, 5, 8, 7 ]

--- unshift() Method in arrays ---
unshift method in arrays is used insert an element in the beginning of the array.
Ex:-
    arr = [ 5 , 5 , 8 , 7 , 6 ];
    arr.unshift(1);
    console.log(arr);
Output:-
    [ 1, 5, 5, 8, 7, 6 ]


--- shift() Method in arrays ---
shift shift method is used to remove the element from the beginning of the array.
Ex:-
    arr = ['b','a','e','i','o','u'];
    arr.shift();
    console.log(arr);
Output:-
    [ 'a', 'e', 'i', 'o', 'u' ]


--- reverse() Method in arrays ---
reverse method is used to reverse the order of the array such that the first element 
    becomes the last and the last element becomes the first.
Ex:-
    arr = ['b','e','a','o','p','n','r'];
    console.log(arr);
    arr.reverse();
    console.log(arr);
Output:-
    >node reverse.js
    [ 'b', 'e', 'a', 'o', 'p', 'n', 'r' ]
    [ 'r', 'n', 'p', 'o', 'a', 'e', 'b' ]

--- sort() Method in arrays ---
sort method is used to sort the elements of array in term of their occurrences.
Ex:-
    arr = ['b','e','a','o','p','n','r'];
    arr.sort();
    console.log(arr);
Output:-
    [ 'a', 'b', 'e', 'n', 'o', 'p', 'r' ]

--- splice() Method in arrays ---
splice method can be used in two ways i.e to either add the element into the array or remove the elements from the array.
Add using splice : Snippet to perform the operation of adding elements to the array using splice.
Ex:-
    arr = ['b','e','a','o','p','n','r'];
    arr.splice(2,2,'rj','nodejs');
    console.log(arr);
Output:-
    >node splice-add.js
    [ 'b', 'e', 'rj', 'nodejs', 'p', 'n', 'r' ]

Remove using splice : Snippet to perform the operation of removing elements from the array using splice.
Ex:-
    arr = ['b','e','a','o','p','n','r'];
    arr.splice(2,2);
    console.log(arr);
Output:-
    [ 'b', 'e', 'p', 'n', 'r' ]


--- concat() Method in arrays ---
concat method is used to join two arrays and returns a new array consisting the elements of both the arrays one after other.
Ex:-
    arr = ['tomatoes','pineapple'];
    arr2 = ['mango','peach','apple'];
    var new_arr = arr.concat(arr2);
    console.log(new_arr);
Output:-
    [ 'tomatoes', 'pineapple', 'mango', 'peach', 'apple' ]


--- indexOf() Method in arrays ---
indexOf method is used to return the first index of the element passed within the array or otherwise it will return -1 if the value is not found.
Ex:-
    arr = [ 5 , 2 , 8 , 5 , 6 ];
    var pos = arr.indexOf(8);
    console.log("index of 8 is : " + pos);
    var pos1 = arr.indexOf(5);
    console.log("index of 5 is : " + pos1);	
Output:-
    >node indexOf.js
    [ 5, 2, 8, 5, 6 ]
    index of 8 is : 2
    index of 5 is : 0


--- lastIndexOf() Method in arrays ---
lastIndexOf method is used to return the last index of the element passed within the array or otherwise it will return -1 if the value is not found.
Ex:-
    arr = [ 5 , 2 , 8 , 5 , 6 ];
    var pos = arr.lastIndexOf(5);
    console.log("index of 5 is : " + pos);
Output:-
    >node lastIndexOf.js
    [ 5, 2, 8, 5, 6 ]
    index of 5 is : 3

--- join() Method in arrays ---
join method is used to join the elements into a string and returns the string. The elements will be separated by a specific separator while joining which will be passed while calling the method. The default separator is , (comma) .
Ex:- 
    arr = [ 5 , 2 , 8 , 5 , 6 ];
    var str = arr1.join(":");
    console.log(str);
Output:- 
    >node join.js
    5:2:8:5:6   

--- slice() Method in arrays ---
slice method is used to extract a section of an array and returns a new array. 
Slice method take two arguments i.e start and end. 
If both elements are omitted then it will slice the whole array. Syntax is : slice(start,end)
start : This is an integer which specifies where to start. 
    The default value is index 0 . 
    If omitted like this :: slice(,end) it will use the default value as start. 
    We can also start from the end by using negative values . This is optional.
end : This is an integer value which specifies where to end (last index excluded). 
    If omitted like this :: slice(start,) it will slice upto the last element. 
    We can use negative values to select from the end. This is optional.
Note : It will not change the original array.
Ex:- 
    arr = [ 5 , 2 , 8 , 5 , 6 ];
    var str = arr.slice(2,4);
    console.log(str);
Output:-
    [ 8, 5 ]

--- every() Method in arrays ---
every method is used to check whether a condition in fulfilled by all the elements or not. every method returns true if the condition is satisfied by all the elements of the array otherwise every method will return false .

--- filter() Method in arrays ---
filter method is used to create a new array , filled with all the elements that passes a test condition usually passed as a function , from the current array .

--- find() Method in arrays --- 
find method returns the first value in the array which passes a test provided as a function. 
If no element matches the condition , it will return undefined .

--- forEach() Method in arrays ---
forEach method in arrays is a loop which is used to call a function for each element in the array. 

--- reduce() Method in arrays ---
reduce method is used to reduce the array to a single value. 
This method executes the provided function for each value of the array and stores the result in accumulator. 
Note : It does not execute on array with no values. 

--- Summary ---
how we can create arrays in node.js and array methods such as: 
push , pop , shift , unshift , reverse , sort , splice , concat , indexOf , lastIndexOf , join , slice , every , filter , find , forEach , reduce , etc. 
All this methods are explained with code examples .
